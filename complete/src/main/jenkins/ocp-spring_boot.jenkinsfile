def APP_NAME = 'gs-spring-boot'
//def templatePath = 'redhat-openjdk18-openshift:1.8~https://github.com/2002batman/spring-boot-api-example.git'
def OCP_BUILD_S2I = 'java~https://github.com/2002batman/gs-spring-boot.git --context-dir=complete'

pipeline {
   agent {
       node {
           label 'maven'
       }

   }


   options {
        // set a timeout of 20 minutes for this pipeline
        timeout(time: 20, unit: 'MINUTES')
    }
    
    stages {
        stage ( 'preamble' ) {
        	steps {
        	    script {
        	        openshift.withCluster () {
        	        	openshift.withProject() {
        	        	    echo "using project: ${openshift.project()}"
    	        	    }
    	        	}
				}
    	    }
    	}
    	
		stage('cleanup') {
			steps {
				script {
					openshift.withCluster() {
						openshift.withProject() {
							openshift.selector("all", [ template : APP_NAME ]).delete() 
							if (openshift.selector("secrets", APP_NAME).exists()) { 
								openshift.selector("secrets", APP_NAME).delete()
							}
						}
					}
				}
			}
		}
		
//		stage('create') {
//			steps {
//				script {
//					openshift.withCluster() {
//						openshift.withProject() {
//							openshift.newApp(OCP_BUILD_S2I) 
//						}
//					}
//				}
//			}
//		}		
		
//		stage('build maven'){
//		    steps{
//		        gradle{
//		            tasks('clean')
//		            tasks('build')
//		        }
//		    }
//		}

//		stage('build oc'){
//		    steps{
//		        gradle{
//		            tasks('clean')
//		            tasks('build')
//		        }
//		    }
//		}

		stage('create') {
			when {
				expression {
					openshift.withCluster() {
						return !openshift.selector ( 'bc', APP_NAME ).exists();
	      			}
	    		}
	  		}
	  		
			steps {
				script {
					openshift.withCluster() {
						openshift.withProject() {
							openshift.newApp(OCP_BUILD_S2I) 
						}
					}
				}
			}
		}	

		stage('build') {
			steps {
				script {
					openshift.withCluster() {
						openshift.withProject() {
							def builds = openshift.selector("bc", APP_NAME).related('builds')
								timeout(5) { 
								builds.untilEach(1) {
								return (it.object().status.phase == "Complete")
								}
							}
						}
					}
				}
			}
		}	
	}
}